syntax = "proto3";

package coroutine.v1;

import "coroutine/v1/function.proto";
import "coroutine/v1/type.proto";

// State is durable coroutine state.
message State {
  // Build is information about the build in which the coruotine state
  // was generated.
  Build build = 1;

  // State is a serialized representation of the objects in the program
  // that are reachable from the coroutine stack.
  bytes state = 2;

  // Types is the set of types used by the object graph.
  repeated Type types = 3;

  // Functions is the set of functions, methods and closures referenced
  // by the object graph.
  repeated Function functions = 4;

  // Regions are encoded regions of memory.
  repeated Region regions = 5;

  // Root is the root object.
  Region root = 6;

  // Strings is the string table.
  repeated string strings = 7;
}

// Build is info about the build in which a durable coroutine
// is/was running.
message Build {
  string id = 1;
  string os = 2;
  string arch = 3;
}

// Region is an encoded region of memory.
message Region {
  // Type is the type of the region, shifted left by one.
  //
  // The least significant bit indicates that this region represents
  // an array, and that the type is the array element type rather
  // than the object that's encoded in this region.
  uint32 type = 1;

  // Array length, for regions that are arrays.
  uint32 array_length = 2;

  // Data is the encoded contents of the memory region.
  bytes data = 3;
}
