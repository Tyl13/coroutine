// Code generated by coroc. DO NOT EDIT.

package examples

import sync "sync"
import syscall "syscall"
import base64 "encoding/base64"
import unsafe "unsafe"
import io "io"
import sort "sort"
import slog "log/slog"
import strings "strings"
import json "encoding/json"
import serde "github.com/stealthrocket/coroutine/serde"
import reflect "reflect"
import runtime "runtime"
import bytes "bytes"
import log "log"
import strconv "strconv"
import unicode "unicode"
import atomic "sync/atomic"
import os "os"
import fs "io/fs"
import time "time"

func Serialize_gen4(s *serde.Serializer, x []int64, b []byte) []byte {
	s = serde.EnsureSerializer(s)
	b = serde.SerializeSize(len(x), b)
	for _, x := range x {
		b = serde.SerializeInt64(s, x, b)
	}
	return b
}

func Deserialize_gen4(d *serde.Deserializer, b []byte) ([]int64, []byte) {
	d = serde.EnsureDeserializer(d)
	n, b := serde.DeserializeSize(b)
	var z []int64
	for i := 0; i < n; i++ {
		var x int64
		x, b = serde.DeserializeInt64(d, b)
		z = append(z, x)
	}
	return z, b
}

func Serialize_Foo(s *serde.Serializer, z Foo, b []byte) []byte {
	s = serde.EnsureSerializer(s)
	x := &z
	b = serde.SerializeSerializable(s, x, b)
	return b
}

func Deserialize_Foo(d *serde.Deserializer, b []byte) (Foo, []byte) {
	d = serde.EnsureDeserializer(d)
	var z Foo
	x := &z
	b = serde.DeserializeSerializable(d, x, b)
	return z, b
}

func Serialize_gen20(s *serde.Serializer, z *string, b []byte) []byte {
	s = serde.EnsureSerializer(s)
	ok, b := s.WritePtr(unsafe.Pointer(z), b)
	if !ok {
		x := *z
		b = serde.SerializeString(s, x, b)
	}
	return b
}

func Deserialize_gen20(d *serde.Deserializer, b []byte) (*string, []byte) {
	d = serde.EnsureDeserializer(d)
	p, i, b := d.ReadPtr(b)
	if p != nil || i == 0 {
		return (*string)(p), b
	}
	var x string
	var xx string
	pxx := &xx
	d.Store(i, unsafe.Pointer(pxx))
	x, b = serde.DeserializeString(d, b)
	*pxx = x
	return pxx, b
}

func Serialize_gen21(s *serde.Serializer, z *int, b []byte) []byte {
	s = serde.EnsureSerializer(s)
	ok, b := s.WritePtr(unsafe.Pointer(z), b)
	if !ok {
		x := *z
		b = serde.SerializeInt(s, x, b)
	}
	return b
}

func Deserialize_gen21(d *serde.Deserializer, b []byte) (*int, []byte) {
	d = serde.EnsureDeserializer(d)
	p, i, b := d.ReadPtr(b)
	if p != nil || i == 0 {
		return (*int)(p), b
	}
	var x int
	var xx int
	pxx := &xx
	d.Store(i, unsafe.Pointer(pxx))
	x, b = serde.DeserializeInt(d, b)
	*pxx = x
	return pxx, b
}

func Serialize_gen22(s *serde.Serializer, z **int, b []byte) []byte {
	s = serde.EnsureSerializer(s)
	ok, b := s.WritePtr(unsafe.Pointer(z), b)
	if !ok {
		x := *z
		b = Serialize_gen21(s, x, b)
	}
	return b
}

func Deserialize_gen22(d *serde.Deserializer, b []byte) (**int, []byte) {
	d = serde.EnsureDeserializer(d)
	p, i, b := d.ReadPtr(b)
	if p != nil || i == 0 {
		return (**int)(p), b
	}
	var x *int
	var xx *int
	pxx := &xx
	d.Store(i, unsafe.Pointer(pxx))
	x, b = Deserialize_gen21(d, b)
	*pxx = x
	return pxx, b
}

func Serialize_gen24(s *serde.Serializer, x struct {
	A int64
	B string
}, b []byte) []byte {
	s = serde.EnsureSerializer(s)
	{
		x := x.A
		b = serde.SerializeInt64(s, x, b)
	}
	{
		x := x.B
		b = serde.SerializeString(s, x, b)
	}
	return b
}

func Deserialize_gen24(d *serde.Deserializer, b []byte) (struct {
	A int64
	B string
}, []byte) {
	d = serde.EnsureDeserializer(d)
	var z struct {
		A int64
		B string
	}
	{
		var x int64
		x, b = serde.DeserializeInt64(d, b)
		z.A = x
	}
	{
		var x string
		x, b = serde.DeserializeString(d, b)
		z.B = x
	}
	return z, b
}

func Serialize_Inner(s *serde.Serializer, z Inner, b []byte) []byte {
	s = serde.EnsureSerializer(s)
	x := (struct {
		A int64
		B string
	})(z)
	b = Serialize_gen24(s, x, b)
	return b
}
func Deserialize_Inner(d *serde.Deserializer, b []byte) (Inner, []byte) {
	d = serde.EnsureDeserializer(d)
	var x struct {
		A int64
		B string
	}
	x, b = Deserialize_gen24(d, b)
	return (Inner)(x), b
}
func Serialize_gen25(s *serde.Serializer, z *Inner, b []byte) []byte {
	s = serde.EnsureSerializer(s)
	ok, b := s.WritePtr(unsafe.Pointer(z), b)
	if !ok {
		x := *z
		b = Serialize_Inner(s, x, b)
	}
	return b
}

func Deserialize_gen25(d *serde.Deserializer, b []byte) (*Inner, []byte) {
	d = serde.EnsureDeserializer(d)
	p, i, b := d.ReadPtr(b)
	if p != nil || i == 0 {
		return (*Inner)(p), b
	}
	var x Inner
	var xx Inner
	pxx := &xx
	d.Store(i, unsafe.Pointer(pxx))
	x, b = Deserialize_Inner(d, b)
	*pxx = x
	return pxx, b
}

func Serialize_gen28(s *serde.Serializer, x struct {
	Value int
	Other *Bounce
}, b []byte) []byte {
	s = serde.EnsureSerializer(s)
	{
		x := x.Value
		b = serde.SerializeInt(s, x, b)
	}
	{
		x := x.Other
		b = Serialize_gen26(s, x, b)
	}
	return b
}

func Deserialize_gen28(d *serde.Deserializer, b []byte) (struct {
	Value int
	Other *Bounce
}, []byte) {
	d = serde.EnsureDeserializer(d)
	var z struct {
		Value int
		Other *Bounce
	}
	{
		var x int
		x, b = serde.DeserializeInt(d, b)
		z.Value = x
	}
	{
		var x *Bounce
		x, b = Deserialize_gen26(d, b)
		z.Other = x
	}
	return z, b
}

func Serialize_Bounce(s *serde.Serializer, z Bounce, b []byte) []byte {
	s = serde.EnsureSerializer(s)
	x := (struct {
		Value int
		Other *Bounce
	})(z)
	b = Serialize_gen28(s, x, b)
	return b
}
func Deserialize_Bounce(d *serde.Deserializer, b []byte) (Bounce, []byte) {
	d = serde.EnsureDeserializer(d)
	var x struct {
		Value int
		Other *Bounce
	}
	x, b = Deserialize_gen28(d, b)
	return (Bounce)(x), b
}
func Serialize_gen26(s *serde.Serializer, z *Bounce, b []byte) []byte {
	s = serde.EnsureSerializer(s)
	ok, b := s.WritePtr(unsafe.Pointer(z), b)
	if !ok {
		x := *z
		b = Serialize_Bounce(s, x, b)
	}
	return b
}

func Deserialize_gen26(d *serde.Deserializer, b []byte) (*Bounce, []byte) {
	d = serde.EnsureDeserializer(d)
	p, i, b := d.ReadPtr(b)
	if p != nil || i == 0 {
		return (*Bounce)(p), b
	}
	var x Bounce
	var xx Bounce
	pxx := &xx
	d.Store(i, unsafe.Pointer(pxx))
	x, b = Deserialize_Bounce(d, b)
	*pxx = x
	return pxx, b
}

func Serialize_gen29(s *serde.Serializer, z map[string]string, b []byte) []byte {
	s = serde.EnsureSerializer(s)
	b = serde.SerializeMapSize(z, b)
	for k, v := range z {
		{
			x := k
			b = serde.SerializeString(s, x, b)
		}
		{
			x := v
			b = serde.SerializeString(s, x, b)
		}
	}
	return b
}

func Deserialize_gen29(d *serde.Deserializer, b []byte) (map[string]string, []byte) {
	d = serde.EnsureDeserializer(d)
	n, b := serde.DeserializeMapSize(b)
	var z map[string]string
	if n < 0 {
		return z, b
	}
	z = make(map[string]string, n)
	var k string
	var v string
	for i := 0; i < n; i++ {
		{
			var x string
			x, b = serde.DeserializeString(d, b)
			k = x
		}
		{
			var x string
			x, b = serde.DeserializeString(d, b)
			v = x
		}
		z[k] = v
	}
	return z, b
}
func Serialize_gen1(s *serde.Serializer, x struct {
	Str        string
	Int        int
	Ints       []int64
	Bool       bool
	Uint64     uint64
	Uint32     uint32
	Uint16     uint16
	Uint8      uint8
	Int64      int64
	Int32      int32
	Int16      int16
	Int8       int8
	Float32    float32
	Float64    float64
	Complex64  complex64
	Complex128 complex128
	FooSer     Foo
	StrPtr     *string
	IntPtr     *int
	IntPtrPtr  **int
	InnerV     Inner
	InnerP     *Inner
	Bounce1    *Bounce
	MapStrStr  map[string]string
	Iface      interface{}
}, b []byte) []byte {
	s = serde.EnsureSerializer(s)
	{
		x := x.Str
		b = serde.SerializeString(s, x, b)
	}
	{
		x := x.Int
		b = serde.SerializeInt(s, x, b)
	}
	{
		x := x.Ints
		b = Serialize_gen4(s, x, b)
	}
	{
		x := x.Bool
		b = serde.SerializeBool(s, x, b)
	}
	{
		x := x.Uint64
		b = serde.SerializeUint64(s, x, b)
	}
	{
		x := x.Uint32
		b = serde.SerializeUint32(s, x, b)
	}
	{
		x := x.Uint16
		b = serde.SerializeUint16(s, x, b)
	}
	{
		x := x.Uint8
		b = serde.SerializeUint8(s, x, b)
	}
	{
		x := x.Int64
		b = serde.SerializeInt64(s, x, b)
	}
	{
		x := x.Int32
		b = serde.SerializeInt32(s, x, b)
	}
	{
		x := x.Int16
		b = serde.SerializeInt16(s, x, b)
	}
	{
		x := x.Int8
		b = serde.SerializeInt8(s, x, b)
	}
	{
		x := x.Float32
		b = serde.SerializeFloat32(s, x, b)
	}
	{
		x := x.Float64
		b = serde.SerializeFloat64(s, x, b)
	}
	{
		x := x.Complex64
		b = serde.SerializeComplex64(s, x, b)
	}
	{
		x := x.Complex128
		b = serde.SerializeComplex128(s, x, b)
	}
	{
		x := x.FooSer
		b = Serialize_Foo(s, x, b)
	}
	{
		x := x.StrPtr
		b = Serialize_gen20(s, x, b)
	}
	{
		x := x.IntPtr
		b = Serialize_gen21(s, x, b)
	}
	{
		x := x.IntPtrPtr
		b = Serialize_gen22(s, x, b)
	}
	{
		x := x.InnerV
		b = Serialize_Inner(s, x, b)
	}
	{
		x := x.InnerP
		b = Serialize_gen25(s, x, b)
	}
	{
		x := x.Bounce1
		b = Serialize_gen26(s, x, b)
	}
	{
		x := x.MapStrStr
		b = Serialize_gen29(s, x, b)
	}
	{
		x := x.Iface
		b = serde.SerializeInterface(s, x, b)
	}
	return b
}

func Deserialize_gen1(d *serde.Deserializer, b []byte) (struct {
	Str        string
	Int        int
	Ints       []int64
	Bool       bool
	Uint64     uint64
	Uint32     uint32
	Uint16     uint16
	Uint8      uint8
	Int64      int64
	Int32      int32
	Int16      int16
	Int8       int8
	Float32    float32
	Float64    float64
	Complex64  complex64
	Complex128 complex128
	FooSer     Foo
	StrPtr     *string
	IntPtr     *int
	IntPtrPtr  **int
	InnerV     Inner
	InnerP     *Inner
	Bounce1    *Bounce
	MapStrStr  map[string]string
	Iface      interface{}
}, []byte) {
	d = serde.EnsureDeserializer(d)
	var z struct {
		Str        string
		Int        int
		Ints       []int64
		Bool       bool
		Uint64     uint64
		Uint32     uint32
		Uint16     uint16
		Uint8      uint8
		Int64      int64
		Int32      int32
		Int16      int16
		Int8       int8
		Float32    float32
		Float64    float64
		Complex64  complex64
		Complex128 complex128
		FooSer     Foo
		StrPtr     *string
		IntPtr     *int
		IntPtrPtr  **int
		InnerV     Inner
		InnerP     *Inner
		Bounce1    *Bounce
		MapStrStr  map[string]string
		Iface      interface{}
	}
	{
		var x string
		x, b = serde.DeserializeString(d, b)
		z.Str = x
	}
	{
		var x int
		x, b = serde.DeserializeInt(d, b)
		z.Int = x
	}
	{
		var x []int64
		x, b = Deserialize_gen4(d, b)
		z.Ints = x
	}
	{
		var x bool
		x, b = serde.DeserializeBool(d, b)
		z.Bool = x
	}
	{
		var x uint64
		x, b = serde.DeserializeUint64(d, b)
		z.Uint64 = x
	}
	{
		var x uint32
		x, b = serde.DeserializeUint32(d, b)
		z.Uint32 = x
	}
	{
		var x uint16
		x, b = serde.DeserializeUint16(d, b)
		z.Uint16 = x
	}
	{
		var x uint8
		x, b = serde.DeserializeUint8(d, b)
		z.Uint8 = x
	}
	{
		var x int64
		x, b = serde.DeserializeInt64(d, b)
		z.Int64 = x
	}
	{
		var x int32
		x, b = serde.DeserializeInt32(d, b)
		z.Int32 = x
	}
	{
		var x int16
		x, b = serde.DeserializeInt16(d, b)
		z.Int16 = x
	}
	{
		var x int8
		x, b = serde.DeserializeInt8(d, b)
		z.Int8 = x
	}
	{
		var x float32
		x, b = serde.DeserializeFloat32(d, b)
		z.Float32 = x
	}
	{
		var x float64
		x, b = serde.DeserializeFloat64(d, b)
		z.Float64 = x
	}
	{
		var x complex64
		x, b = serde.DeserializeComplex64(d, b)
		z.Complex64 = x
	}
	{
		var x complex128
		x, b = serde.DeserializeComplex128(d, b)
		z.Complex128 = x
	}
	{
		var x Foo
		x, b = Deserialize_Foo(d, b)
		z.FooSer = x
	}
	{
		var x *string
		x, b = Deserialize_gen20(d, b)
		z.StrPtr = x
	}
	{
		var x *int
		x, b = Deserialize_gen21(d, b)
		z.IntPtr = x
	}
	{
		var x **int
		x, b = Deserialize_gen22(d, b)
		z.IntPtrPtr = x
	}
	{
		var x Inner
		x, b = Deserialize_Inner(d, b)
		z.InnerV = x
	}
	{
		var x *Inner
		x, b = Deserialize_gen25(d, b)
		z.InnerP = x
	}
	{
		var x *Bounce
		x, b = Deserialize_gen26(d, b)
		z.Bounce1 = x
	}
	{
		var x map[string]string
		x, b = Deserialize_gen29(d, b)
		z.MapStrStr = x
	}
	{
		var x interface{}
		x, b = serde.DeserializeInterface(d, b)
		z.Iface = x
	}
	return z, b
}

func Serialize_Struct1(s *serde.Serializer, z Struct1, b []byte) []byte {
	s = serde.EnsureSerializer(s)
	x := (struct {
		Str        string
		Int        int
		Ints       []int64
		Bool       bool
		Uint64     uint64
		Uint32     uint32
		Uint16     uint16
		Uint8      uint8
		Int64      int64
		Int32      int32
		Int16      int16
		Int8       int8
		Float32    float32
		Float64    float64
		Complex64  complex64
		Complex128 complex128
		FooSer     Foo
		StrPtr     *string
		IntPtr     *int
		IntPtrPtr  **int
		InnerV     Inner
		InnerP     *Inner
		Bounce1    *Bounce
		MapStrStr  map[string]string
		Iface      interface{}
	})(z)
	b = Serialize_gen1(s, x, b)
	return b
}
func Deserialize_Struct1(d *serde.Deserializer, b []byte) (Struct1, []byte) {
	d = serde.EnsureDeserializer(d)
	var x struct {
		Str        string
		Int        int
		Ints       []int64
		Bool       bool
		Uint64     uint64
		Uint32     uint32
		Uint16     uint16
		Uint8      uint8
		Int64      int64
		Int32      int32
		Int16      int16
		Int8       int8
		Float32    float32
		Float64    float64
		Complex64  complex64
		Complex128 complex128
		FooSer     Foo
		StrPtr     *string
		IntPtr     *int
		IntPtrPtr  **int
		InnerV     Inner
		InnerP     *Inner
		Bounce1    *Bounce
		MapStrStr  map[string]string
		Iface      interface{}
	}
	x, b = Deserialize_gen1(d, b)
	return (Struct1)(x), b
}
func init() {
	var t reflect.Type
	{
		var x syscall.SockaddrLinklayer
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x sync.RWMutex
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x sort.IntSlice
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Inet4Pktinfo
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.PtraceRegs
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.ICMPv6Filter
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Linger
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.SockFprog
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x json.UnsupportedValueError
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x unicode.RangeTable
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Dirent
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x slog.TextHandler
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x os.SyscallError
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.RawSockaddrNetlink
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x runtime.MemProfileRecord
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x uint16
		t = reflect.TypeOf(x)
		sw := func(s *serde.Serializer, x any, b []byte) []byte {
			return serde.SerializeUint16(s, x.(uint16), b)
		}
		dw := func(d *serde.Deserializer, b []byte) (any, []byte) {
			return serde.DeserializeUint16(d, b)
		}
		serde.RegisterTypeWithCodec(t, sw, dw)
	}
	{
		var x sync.Map
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x runtime.Pinner
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.SysProcIDMap
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.SockFilter
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.IfAddrmsg
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x reflect.ValueError
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x sort.StringSlice
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.EpollEvent
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.RawSockaddrAny
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Termios
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x log.Logger
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x uint64
		t = reflect.TypeOf(x)
		sw := func(s *serde.Serializer, x any, b []byte) []byte {
			return serde.SerializeUint64(s, x.(uint64), b)
		}
		dw := func(d *serde.Deserializer, b []byte) (any, []byte) {
			return serde.DeserializeUint64(d, b)
		}
		serde.RegisterTypeWithCodec(t, sw, dw)
	}
	{
		var x syscall.Timespec
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x json.InvalidUnmarshalError
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x complex64
		t = reflect.TypeOf(x)
		sw := func(s *serde.Serializer, x any, b []byte) []byte {
			return serde.SerializeComplex64(s, x.(complex64), b)
		}
		dw := func(d *serde.Deserializer, b []byte) (any, []byte) {
			return serde.DeserializeComplex64(d, b)
		}
		serde.RegisterTypeWithCodec(t, sw, dw)
	}
	{
		var x syscall.SockaddrInet4
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x rune
		t = reflect.TypeOf(x)
		sw := func(s *serde.Serializer, x any, b []byte) []byte {
			return serde.SerializeInt32(s, x.(rune), b)
		}
		dw := func(d *serde.Deserializer, b []byte) (any, []byte) {
			return serde.DeserializeInt32(d, b)
		}
		serde.RegisterTypeWithCodec(t, sw, dw)
	}
	{
		var x runtime.MemStats
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x runtime.TypeAssertionError
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x io.SectionReader
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x slog.Kind
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x uint32
		t = reflect.TypeOf(x)
		sw := func(s *serde.Serializer, x any, b []byte) []byte {
			return serde.SerializeUint32(s, x.(uint32), b)
		}
		dw := func(d *serde.Deserializer, b []byte) (any, []byte) {
			return serde.DeserializeUint32(d, b)
		}
		serde.RegisterTypeWithCodec(t, sw, dw)
	}
	{
		var x syscall.Sysinfo_t
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x sync.Cond
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x io.LimitedReader
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.IPv6Mreq
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x complex128
		t = reflect.TypeOf(x)
		sw := func(s *serde.Serializer, x any, b []byte) []byte {
			return serde.SerializeComplex128(s, x.(complex128), b)
		}
		dw := func(d *serde.Deserializer, b []byte) (any, []byte) {
			return serde.DeserializeComplex128(d, b)
		}
		serde.RegisterTypeWithCodec(t, sw, dw)
	}
	{
		var x io.PipeWriter
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Ucred
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x slog.LevelVar
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x Struct1
		t = reflect.TypeOf(x)
		sw := func(s *serde.Serializer, x any, b []byte) []byte {
			return Serialize_Struct1(s, x.(Struct1), b)
		}
		dw := func(d *serde.Deserializer, b []byte) (any, []byte) {
			return Deserialize_Struct1(d, b)
		}
		serde.RegisterTypeWithCodec(t, sw, dw)
	}
	{
		var x atomic.Int64
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Errno
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.IPMreqn
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x Foo
		t = reflect.TypeOf(x)
		sw := func(s *serde.Serializer, x any, b []byte) []byte {
			return Serialize_Foo(s, x.(Foo), b)
		}
		dw := func(d *serde.Deserializer, b []byte) (any, []byte) {
			return Deserialize_Foo(d, b)
		}
		serde.RegisterTypeWithCodec(t, sw, dw)
	}
	{
		var x json.SyntaxError
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x strings.Builder
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x reflect.Method
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Statfs_t
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Rlimit
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x bytes.Reader
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x atomic.Uint32
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.IPMreq
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x slog.Level
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x fs.FileMode
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x os.File
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.RawSockaddrInet6
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.FdSet
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x uint8
		t = reflect.TypeOf(x)
		sw := func(s *serde.Serializer, x any, b []byte) []byte {
			return serde.SerializeUint8(s, x.(uint8), b)
		}
		dw := func(d *serde.Deserializer, b []byte) (any, []byte) {
			return serde.DeserializeUint8(d, b)
		}
		serde.RegisterTypeWithCodec(t, sw, dw)
	}
	{
		var x runtime.BlockProfileRecord
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.NetlinkRouteAttr
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x json.Encoder
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x string
		t = reflect.TypeOf(x)
		sw := func(s *serde.Serializer, x any, b []byte) []byte {
			return serde.SerializeString(s, x.(string), b)
		}
		dw := func(d *serde.Deserializer, b []byte) (any, []byte) {
			return serde.DeserializeString(d, b)
		}
		serde.RegisterTypeWithCodec(t, sw, dw)
	}
	{
		var x strconv.NumError
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x atomic.Uint64
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x atomic.Value
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Utsname
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x os.Process
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x strings.Reader
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x Struct2
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x runtime.PanicNilError
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x reflect.StructField
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x time.Timer
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Time_t
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x atomic.Bool
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x json.MarshalerError
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x unicode.CaseRange
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x json.UnmarshalFieldError
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x unsafe.Pointer
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x reflect.MapIter
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x runtime.Frames
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x io.OffsetWriter
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Rusage
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.RawSockaddr
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x unicode.SpecialCase
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Timeval
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x sync.Mutex
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Signal
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x Inner
		t = reflect.TypeOf(x)
		sw := func(s *serde.Serializer, x any, b []byte) []byte {
			return Serialize_Inner(s, x.(Inner), b)
		}
		dw := func(d *serde.Deserializer, b []byte) (any, []byte) {
			return Deserialize_Inner(d, b)
		}
		serde.RegisterTypeWithCodec(t, sw, dw)
	}
	{
		var x syscall.RtNexthop
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x strings.Replacer
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x reflect.Value
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x reflect.StructTag
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.SockaddrNetlink
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x json.InvalidUTF8Error
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x slog.Source
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x slog.Record
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x json.UnsupportedTypeError
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x int16
		t = reflect.TypeOf(x)
		sw := func(s *serde.Serializer, x any, b []byte) []byte {
			return serde.SerializeInt16(s, x.(int16), b)
		}
		dw := func(d *serde.Deserializer, b []byte) (any, []byte) {
			return serde.DeserializeInt16(d, b)
		}
		serde.RegisterTypeWithCodec(t, sw, dw)
	}
	{
		var x sync.WaitGroup
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.NetlinkRouteRequest
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x time.Weekday
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Timex
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x float64
		t = reflect.TypeOf(x)
		sw := func(s *serde.Serializer, x any, b []byte) []byte {
			return serde.SerializeFloat64(s, x.(float64), b)
		}
		dw := func(d *serde.Deserializer, b []byte) (any, []byte) {
			return serde.DeserializeFloat64(d, b)
		}
		serde.RegisterTypeWithCodec(t, sw, dw)
	}
	{
		var x runtime.Func
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x os.LinkError
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.ProcAttr
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x slog.Value
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x json.Decoder
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.SockaddrInet6
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x json.Number
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x reflect.SelectDir
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x bool
		t = reflect.TypeOf(x)
		sw := func(s *serde.Serializer, x any, b []byte) []byte {
			return serde.SerializeBool(s, x.(bool), b)
		}
		dw := func(d *serde.Deserializer, b []byte) (any, []byte) {
			return serde.DeserializeBool(d, b)
		}
		serde.RegisterTypeWithCodec(t, sw, dw)
	}
	{
		var x syscall.SocketControlMessage
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Fsid
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.NlAttr
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x slog.Logger
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x base64.CorruptInputError
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x serde.ID
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.TCPInfo
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.RtGenmsg
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x reflect.StringHeader
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x io.PipeReader
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.InotifyEvent
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x int64
		t = reflect.TypeOf(x)
		sw := func(s *serde.Serializer, x any, b []byte) []byte {
			return serde.SerializeInt64(s, x.(int64), b)
		}
		dw := func(d *serde.Deserializer, b []byte) (any, []byte) {
			return serde.DeserializeInt64(d, b)
		}
		serde.RegisterTypeWithCodec(t, sw, dw)
	}
	{
		var x reflect.SelectCase
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Msghdr
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Utimbuf
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.RtAttr
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x time.ParseError
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.RtMsg
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x base64.Encoding
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x runtime.Frame
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x runtime.StackRecord
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x int8
		t = reflect.TypeOf(x)
		sw := func(s *serde.Serializer, x any, b []byte) []byte {
			return serde.SerializeInt8(s, x.(int8), b)
		}
		dw := func(d *serde.Deserializer, b []byte) (any, []byte) {
			return serde.DeserializeInt8(d, b)
		}
		serde.RegisterTypeWithCodec(t, sw, dw)
	}
	{
		var x byte
		t = reflect.TypeOf(x)
		sw := func(s *serde.Serializer, x any, b []byte) []byte {
			return serde.SerializeUint8(s, x.(byte), b)
		}
		dw := func(d *serde.Deserializer, b []byte) (any, []byte) {
			return serde.DeserializeUint8(d, b)
		}
		serde.RegisterTypeWithCodec(t, sw, dw)
	}
	{
		var x unicode.Range32
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x Bounce
		t = reflect.TypeOf(x)
		sw := func(s *serde.Serializer, x any, b []byte) []byte {
			return Serialize_Bounce(s, x.(Bounce), b)
		}
		dw := func(d *serde.Deserializer, b []byte) (any, []byte) {
			return Deserialize_Bounce(d, b)
		}
		serde.RegisterTypeWithCodec(t, sw, dw)
	}
	{
		var x int32
		t = reflect.TypeOf(x)
		sw := func(s *serde.Serializer, x any, b []byte) []byte {
			return serde.SerializeInt32(s, x.(int32), b)
		}
		dw := func(d *serde.Deserializer, b []byte) (any, []byte) {
			return serde.DeserializeInt32(d, b)
		}
		serde.RegisterTypeWithCodec(t, sw, dw)
	}
	{
		var x syscall.Inet6Pktinfo
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.IfInfomsg
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Tms
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x atomic.Uintptr
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x os.ProcessState
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x time.Time
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.WaitStatus
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Cmsghdr
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Credential
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.RawSockaddrLinklayer
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x atomic.Int32
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.NetlinkMessage
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x json.RawMessage
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x reflect.SliceHeader
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x unicode.Range16
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x time.Ticker
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x time.Month
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x json.UnmarshalTypeError
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x uint
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.NlMsgerr
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x json.Delim
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x serde.Deserializer
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x float32
		t = reflect.TypeOf(x)
		sw := func(s *serde.Serializer, x any, b []byte) []byte {
			return serde.SerializeFloat32(s, x.(float32), b)
		}
		dw := func(d *serde.Deserializer, b []byte) (any, []byte) {
			return serde.DeserializeFloat32(d, b)
		}
		serde.RegisterTypeWithCodec(t, sw, dw)
	}
	{
		var x sync.Pool
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.SysProcAttr
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x sort.Float64Slice
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.NlMsghdr
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Iovec
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x uintptr
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x reflect.Kind
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.RawSockaddrInet4
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Flock_t
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x slog.JSONHandler
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x bytes.Buffer
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Stat_t
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x sync.Once
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x os.ProcAttr
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x time.Duration
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.Ustat_t
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.IPv6MTUInfo
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x slog.Attr
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x serde.Serializer
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x fs.PathError
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x time.Location
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.SockaddrUnix
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x int
		t = reflect.TypeOf(x)
		sw := func(s *serde.Serializer, x any, b []byte) []byte {
			return serde.SerializeInt(s, x.(int), b)
		}
		dw := func(d *serde.Deserializer, b []byte) (any, []byte) {
			return serde.DeserializeInt(d, b)
		}
		serde.RegisterTypeWithCodec(t, sw, dw)
	}
	{
		var x reflect.ChanDir
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x syscall.RawSockaddrUnix
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
	{
		var x slog.HandlerOptions
		t = reflect.TypeOf(x)
		serde.RegisterType(t)
	}
}
