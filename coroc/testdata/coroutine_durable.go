// Code generated by coroc. DO NOT EDIT

//go:build durable

package testdata

import (
	bytes "bytes"
	base64 "encoding/base64"
	json "encoding/json"
	"github.com/stealthrocket/coroutine"
	io "io"
	fs "io/fs"
	log "log"
	slog "log/slog"
	os "os"
	reflect "reflect"
	runtime "runtime"
	sort "sort"
	strconv "strconv"
	strings "strings"
	sync "sync"
	atomic "sync/atomic"
	syscall "syscall"
	time "time"
	unicode "unicode"
	unsafe "unsafe"
)

func Identity(n int) {
	_c := coroutine.LoadContext[int, any]()
	_f := _c.Push()
	if _f.IP > 0 {
		n = _f.Get(0).(int)
	}
	defer func() {
		if _c.Unwinding() {
			_f.Set(0, n)
		} else {
			_c.Pop()
		}
	}()
	coroutine.Yield[int, any](n)
}

func SquareGenerator(n int) {
	_c := coroutine.LoadContext[int, any]()
	_f := _c.Push()
	var _o0 int
	if _f.IP > 0 {
		n = _f.Get(0).(int)
		_o0 = _f.Get(1).(int)
	}
	defer func() {
		if _c.Unwinding() {
			_f.Set(0, n)
			_f.Set(1, _o0)
		} else {
			_c.Pop()
		}
	}()
	switch {
	case _f.IP < 2:
		_o0 = 1
		_f.IP = 2
		fallthrough
	case _f.IP < 3:
		for ; _o0 <= n; _o0++ {
			coroutine.Yield[int, any](_o0 * _o0)
			_f.IP = 2
		}
	}
}

func SquareGeneratorTwice(n int) {
	_c := coroutine.LoadContext[int, any]()
	_f := _c.Push()
	if _f.IP > 0 {
		n = _f.Get(0).(int)
	}
	defer func() {
		if _c.Unwinding() {
			_f.Set(0, n)
		} else {
			_c.Pop()
		}
	}()
	switch {
	case _f.IP < 2:
		SquareGenerator(n)
		_f.IP = 2
		fallthrough
	case _f.IP < 3:
		SquareGenerator(n)
	}
}

func EvenSquareGenerator(n int) {
	_c := coroutine.LoadContext[int, any]()
	_f := _c.Push()
	var _o0 int
	var _o1 int
	if _f.IP > 0 {
		n = _f.Get(0).(int)
		_o0 = _f.Get(1).(int)
		_o1 = _f.Get(2).(int)
	}
	defer func() {
		if _c.Unwinding() {
			_f.Set(0, n)
			_f.Set(1, _o0)
			_f.Set(2, _o1)
		} else {
			_c.Pop()
		}
	}()
	switch {
	case _f.IP < 2:
		_o0 = 1
		_f.IP = 2
		fallthrough
	case _f.IP < 4:
		for ; _o0 <= n; _o0++ {
			switch {
			case _f.IP < 3:
				_o1 = _o0 % 2
				_f.IP = 3
				fallthrough
			case _f.IP < 4:
				if _o1 == 0 {
					coroutine.Yield[int, any](_o0 * _o0)
				}
			}
			_f.IP = 2
		}
	}
}

func NestedLoops(n int) {
	_c := coroutine.LoadContext[int, any]()
	_f := _c.Push()
	var _o0 int
	var _o1 int
	var _o2 int
	if _f.IP > 0 {
		n = _f.Get(0).(int)
		_o0 = _f.Get(1).(int)
		_o1 = _f.Get(2).(int)
		_o2 = _f.Get(3).(int)
	}
	defer func() {
		if _c.Unwinding() {
			_f.Set(0, n)
			_f.Set(1, _o0)
			_f.Set(2, _o1)
			_f.Set(3, _o2)
		} else {
			_c.Pop()
		}
	}()
	switch {
	case _f.IP < 2:
		_o0 = 1
		_f.IP = 2
		fallthrough
	case _f.IP < 5:
		for ; _o0 <= n; _o0++ {
			switch {
			case _f.IP < 3:
				_o1 = 1
				_f.IP = 3
				fallthrough
			case _f.IP < 5:
				for ; _o1 <= n; _o1++ {
					switch {
					case _f.IP < 4:
						_o2 = 1
						_f.IP = 4
						fallthrough
					case _f.IP < 5:
						for ; _o2 <= n; _o2++ {
							coroutine.Yield[int, any](_o0 * _o1 * _o2)
							_f.IP = 4
						}
					}
					_f.IP = 3
				}
			}
			_f.IP = 2
		}
	}
}

func FizzBuzzIfGenerator(n int) {
	_c := coroutine.LoadContext[int, any]()
	_f := _c.Push()
	var _o0 int
	var _o1 int
	if _f.IP > 0 {
		n = _f.Get(0).(int)
		_o0 = _f.Get(1).(int)

		_o1 = _f.Get(2).(int)
	}
	defer func() {
		if _c.Unwinding() {
			_f.Set(0, n)
			_f.Set(1, _o0)
			_f.Set(2, _o1)
		} else {
			_c.Pop()
		}
	}()
	switch {
	case _f.IP < 2:
		_o0 = 1
		_f.IP = 2
		fallthrough
	case _f.IP < 7:
		for ; _o0 <= n; _o0++ {
			if _o0%3 == 0 && _o0%5 == 0 {
				coroutine.Yield[int, any](FizzBuzz)
			} else if _o0%3 == 0 {
				coroutine.Yield[int, any](Fizz)
			} else {
				_o1 = _o0 % 5
				if _o1 == 0 {
					coroutine.Yield[int, any](Buzz)
				} else {
					coroutine.Yield[int, any](_o0)
				}
			}
			_f.IP = 2
		}
	}
}

func FizzBuzzSwitchGenerator(n int) {
	_c := coroutine.LoadContext[int, any]()
	_f := _c.Push()
	var _o0 int
	if _f.IP > 0 {
		n = _f.Get(0).(int)
		_o0 = _f.Get(1).(int)
	}
	defer func() {
		if _c.Unwinding() {
			_f.Set(0, n)
			_f.Set(1, _o0)
		} else {
			_c.Pop()
		}
	}()
	switch {
	case _f.IP < 2:
		_o0 = 1
		_f.IP = 2
		fallthrough
	case _f.IP < 6:
		for ; _o0 <= n; _o0++ {
			switch {
			case _o0%3 == 0 && _o0%5 == 0:
				coroutine.Yield[int, any](FizzBuzz)
			case _o0%3 == 0:
				coroutine.Yield[int, any](Fizz)
			case _o0%5 == 0:
				coroutine.Yield[int, any](Buzz)
			default:
				coroutine.Yield[int, any](_o0)
			}
			_f.IP = 2
		}
	}
}

func Shadowing(_ int) {
	_c := coroutine.LoadContext[int, any]()
	_f := _c.Push()
	var _o0 int
	var _o1 int
	var _o2 int
	var _o3 int
	var _o4 int
	var _o5 int
	var _o6 int
	var _o7 int
	var _o8 int

	const _o9 = 11

	const _o10 = 12
	var _o11 int

	type _o12 uint16

	type _o13 uint32

	const _o14 = 1
	type _o15 [_o14]uint8

	type _o16 [_o14]uint8

	const _o17 = unsafe.Sizeof(_o16{}) * 2
	type _o18 [_o17]uint8
	if _f.IP > 0 {
		_o0 = _f.Get(0).(int)

		_o1 = _f.Get(1).(int)

		_o2 = _f.Get(2).(int)

		_o3 = _f.Get(3).(int)

		_o4 = _f.Get(4).(int)

		_o5 = _f.Get(5).(int)

		_o6 = _f.Get(6).(int)

		_o7 = _f.Get(7).(int)

		_o8 = _f.Get(8).(int)

		_o11 = _f.Get(9).(int)
	}
	defer func() {
		if _c.Unwinding() {
			_f.Set(0, _o0)
			_f.Set(1, _o1)
			_f.Set(2, _o2)
			_f.Set(3, _o3)
			_f.Set(4, _o4)
			_f.Set(5, _o5)
			_f.Set(6, _o6)
			_f.Set(7, _o7)
			_f.Set(8, _o8)
			_f.Set(9, _o11)
		} else {
			_c.Pop()
		}
	}()
	switch {
	case _f.IP < 2:
		_o0 = 0
		_f.IP = 2
		fallthrough
	case _f.IP < 3:
		coroutine.Yield[int, any](_o0)
		_f.IP = 3
		fallthrough
	case _f.IP < 5:
		switch {
		case _f.IP < 4:

			_o1 = 1
			_f.IP = 4
			fallthrough
		case _f.IP < 5:
			if true {
				coroutine.Yield[int, any](_o1)
			}
		}
		_f.IP = 5
		fallthrough
	case _f.IP < 6:
		coroutine.Yield[int, any](_o0)
		_f.IP = 6
		fallthrough
	case _f.IP < 8:
		switch {
		case _f.IP < 7:

			_o2 = 1
			_f.IP = 7
			fallthrough
		case _f.IP < 8:
			for ; _o2 < 3; _o2++ {
				coroutine.Yield[int, any](_o2)
				_f.IP = 7
			}
		}
		_f.IP = 8
		fallthrough
	case _f.IP < 9:
		coroutine.Yield[int, any](_o0)
		_f.IP = 9
		fallthrough
	case _f.IP < 13:
		switch {
		case _f.IP < 10:

			_o3 = 1
			_f.IP = 10
			fallthrough
		case _f.IP < 13:
			switch _o3 {
			case 1:
				switch {
				case _f.IP < 12:
					switch {
					case _f.IP < 11:
						_o4 = 2
						_f.IP = 11
						fallthrough
					case _f.IP < 12:
						switch _o4 {
						default:
							coroutine.Yield[int, any](_o4)
						}
					}
					_f.IP = 12
					fallthrough
				case _f.IP < 13:
					coroutine.Yield[int, any](_o3)
				}
			}
		}
		_f.IP = 13
		fallthrough
	case _f.IP < 14:

		coroutine.Yield[int, any](_o0)
		_f.IP = 14
		fallthrough
	case _f.IP < 18:
		switch {
		case _f.IP < 15:

			_o5 = 1
			_f.IP = 15
			fallthrough
		case _f.IP < 17:
			switch {
			case _f.IP < 16:

				_o6 = 2
				_f.IP = 16
				fallthrough
			case _f.IP < 17:
				coroutine.Yield[int, any](_o6)
			}
			_f.IP = 17
			fallthrough
		case _f.IP < 18:

			coroutine.Yield[int, any](_o5)
		}
		_f.IP = 18
		fallthrough
	case _f.IP < 19:

		coroutine.Yield[int, any](_o0)
		_f.IP = 19
		fallthrough
	case _f.IP < 20:
		_o7 = _o0
		_f.IP = 20
		fallthrough
	case _f.IP < 22:
		switch {
		case _f.IP < 21:

			_o8 = 1
			_f.IP = 21
			fallthrough
		case _f.IP < 22:
			coroutine.Yield[int, any](_o8)
		}
		_f.IP = 22
		fallthrough
	case _f.IP < 23:

		coroutine.Yield[int, any](_o7)
		_f.IP = 23
		fallthrough
	case _f.IP < 26:
		switch {
		case _f.IP < 25:
			switch {
			case _f.IP < 24:

				_o11 = 13
				_f.IP = 24
				fallthrough
			case _f.IP < 25:
				coroutine.Yield[int, any](_o11)
			}
			_f.IP = 25
			fallthrough
		case _f.IP < 26:

			coroutine.Yield[int, any](_o10)
		}
		_f.IP = 26
		fallthrough
	case _f.IP < 27:

		coroutine.Yield[int, any](_o9)
		_f.IP = 27
		fallthrough
	case _f.IP < 28:

		coroutine.Yield[int, any](int(unsafe.Sizeof(_o13(0))))
		_f.IP = 28
		fallthrough
	case _f.IP < 29:

		coroutine.Yield[int, any](int(unsafe.Sizeof(_o12(0))))
		_f.IP = 29
		fallthrough
	case _f.IP < 31:
		switch {
		case _f.IP < 30:

			coroutine.Yield[int, any](int(unsafe.Sizeof(_o16{})))
			_f.IP = 30
			fallthrough
		case _f.IP < 31:

			coroutine.Yield[int, any](int(unsafe.Sizeof(_o18{})))
		}
		_f.IP = 31
		fallthrough
	case _f.IP < 32:

		coroutine.Yield[int, any](int(unsafe.Sizeof(_o15{})))
	}
}

func RangeSliceIndexGenerator(_ int) {
	_c := coroutine.LoadContext[int, any]()
	_f := _c.Push()
	var _o0 []int
	var _o1 int
	if _f.IP > 0 {
		_o0 = _f.Get(0).([]int)
		_o1 = _f.Get(1).(int)
	}
	defer func() {
		if _c.Unwinding() {
			_f.Set(0, _o0)
			_f.Set(1, _o1)
		} else {
			_c.Pop()
		}
	}()
	switch {
	case _f.IP < 2:
		_o0 = []int{10, 20, 30}
		_f.IP = 2
		fallthrough
	case _f.IP < 4:
		switch {
		case _f.IP < 3:
			_o1 = 0
			_f.IP = 3
			fallthrough
		case _f.IP < 4:
			for ; _o1 < len(_o0); _o1++ {
				coroutine.Yield[int, any](_o1)
				_f.IP = 3
			}
		}
	}
}

func RangeArrayIndexValueGenerator(_ int) {
	_c := coroutine.LoadContext[int, any]()
	_f := _c.Push()
	var _o0 [3]int
	var _o1 int
	var _o2 int
	if _f.IP > 0 {
		_o0 = _f.Get(0).([3]int)
		_o1 = _f.Get(1).(int)
		_o2 = _f.Get(2).(int)
	}
	defer func() {
		if _c.Unwinding() {
			_f.Set(0, _o0)
			_f.Set(1, _o1)
			_f.Set(2, _o2)
		} else {
			_c.Pop()
		}
	}()
	switch {
	case _f.IP < 2:
		_o0 = [...]int{10, 20, 30}
		_f.IP = 2
		fallthrough
	case _f.IP < 6:
		switch {
		case _f.IP < 3:
			_o1 = 0
			_f.IP = 3
			fallthrough
		case _f.IP < 6:
			for ; _o1 < len(_o0); _o1++ {
				switch {
				case _f.IP < 4:
					_o2 = _o0[_o1]
					_f.IP = 4
					fallthrough
				case _f.IP < 5:
					coroutine.Yield[int, any](_o1)
					_f.IP = 5
					fallthrough
				case _f.IP < 6:
					coroutine.Yield[int, any](_o2)
				}
				_f.IP = 3
			}
		}
	}
}

func TypeSwitchingGenerator(_ int) {
	_c := coroutine.LoadContext[int, any]()
	_f := _c.Push()
	var _o0 []any
	var _o1 int
	var _o2 any
	if _f.IP > 0 {
		_o0 = _f.Get(0).([]any)
		_o1 = _f.Get(1).(int)
		_o2 = _f.Get(2).(any)
	}
	defer func() {
		if _c.Unwinding() {
			_f.Set(0, _o0)
			_f.Set(1, _o1)
			_f.Set(2, _o2)
		} else {
			_c.Pop()
		}
	}()
	switch {
	case _f.IP < 2:
		_o0 = []any{int8(10), int16(20), int32(30), int64(40)}
		_f.IP = 2
		fallthrough
	case _f.IP < 12:
		switch {
		case _f.IP < 3:
			_o1 = 0
			_f.IP = 3
			fallthrough
		case _f.IP < 12:
			for ; _o1 < len(_o0); _o1++ {
				switch {
				case _f.IP < 4:
					_o2 = _o0[_o1]
					_f.IP = 4
					fallthrough
				case _f.IP < 8:
					switch _o2.(type) {
					case int8:
						coroutine.Yield[int, any](1)
					case int16:
						coroutine.Yield[int, any](2)
					case int32:
						coroutine.Yield[int, any](4)
					case int64:
						coroutine.Yield[int, any](8)
					}
					_f.IP = 8
					fallthrough
				case _f.IP < 12:
					switch v := _o2.(type) {
					case int8:
						coroutine.Yield[int, any](int(v))
					case int16:
						coroutine.Yield[int, any](int(v))
					case int32:
						coroutine.Yield[int, any](int(v))
					case int64:
						coroutine.Yield[int, any](int(v))
					}
				}
				_f.IP = 3
			}
		}
	}
}
func init() {
	coroutine.RegisterType[**byte]()
	coroutine.RegisterType[*[100000]uintptr]()
	coroutine.RegisterType[*[1125899906842623]byte]()
	coroutine.RegisterType[*[131072]uint16]()
	coroutine.RegisterType[*[140737488355327]byte]()
	coroutine.RegisterType[*[16]byte]()
	coroutine.RegisterType[*[171]uint8]()
	coroutine.RegisterType[*[1]uintptr]()
	coroutine.RegisterType[*[268435456]uintptr]()
	coroutine.RegisterType[*[281474976710655]uint32]()
	coroutine.RegisterType[*[2]byte]()
	coroutine.RegisterType[*[2]float32]()
	coroutine.RegisterType[*[2]float64]()
	coroutine.RegisterType[*[2]int32]()
	coroutine.RegisterType[*[2]uint32]()
	coroutine.RegisterType[*[2]uintptr]()
	coroutine.RegisterType[*[32]rune]()
	coroutine.RegisterType[*[32]uintptr]()
	coroutine.RegisterType[*[4]byte]()
	coroutine.RegisterType[*[562949953421311]uint16]()
	coroutine.RegisterType[*[5]float64]()
	coroutine.RegisterType[*[65536]uintptr]()
	coroutine.RegisterType[*[6]float64]()
	coroutine.RegisterType[*[70368744177663]uint16]()
	coroutine.RegisterType[*[8]byte]()
	coroutine.RegisterType[*[8]uint8]()
	coroutine.RegisterType[*[][]byte]()
	coroutine.RegisterType[*[]byte]()
	coroutine.RegisterType[*[]string]()
	coroutine.RegisterType[*[]uint64]()
	coroutine.RegisterType[*bool]()
	coroutine.RegisterType[*byte]()
	coroutine.RegisterType[*complex128]()
	coroutine.RegisterType[*complex64]()
	coroutine.RegisterType[*float32]()
	coroutine.RegisterType[*float64]()
	coroutine.RegisterType[*int]()
	coroutine.RegisterType[*int16]()
	coroutine.RegisterType[*int32]()
	coroutine.RegisterType[*int64]()
	coroutine.RegisterType[*int8]()
	coroutine.RegisterType[*string]()
	coroutine.RegisterType[*uint]()
	coroutine.RegisterType[*uint16]()
	coroutine.RegisterType[*uint32]()
	coroutine.RegisterType[*uint64]()
	coroutine.RegisterType[*uint8]()
	coroutine.RegisterType[*uintptr]()
	coroutine.RegisterType[[0]byte]()
	coroutine.RegisterType[[0]uint8]()
	coroutine.RegisterType[[0]uintptr]()
	coroutine.RegisterType[[1000]uintptr]()
	coroutine.RegisterType[[100]byte]()
	coroutine.RegisterType[[1024]bool]()
	coroutine.RegisterType[[1024]byte]()
	coroutine.RegisterType[[1024]uint8]()
	coroutine.RegisterType[[1048576]uint8]()
	coroutine.RegisterType[[104]byte]()
	coroutine.RegisterType[[108]byte]()
	coroutine.RegisterType[[108]int8]()
	coroutine.RegisterType[[10]byte]()
	coroutine.RegisterType[[10]float64]()
	coroutine.RegisterType[[10]string]()
	coroutine.RegisterType[[11]float64]()
	coroutine.RegisterType[[128]bool]()
	coroutine.RegisterType[[128]byte]()
	coroutine.RegisterType[[128]uint16]()
	coroutine.RegisterType[[128]uint64]()
	coroutine.RegisterType[[128]uintptr]()
	coroutine.RegisterType[[129]uint8]()
	coroutine.RegisterType[[12]float64]()
	coroutine.RegisterType[[131072]uintptr]()
	coroutine.RegisterType[[133]string]()
	coroutine.RegisterType[[13]int32]()
	coroutine.RegisterType[[14]byte]()
	coroutine.RegisterType[[14]int8]()
	coroutine.RegisterType[[15]float64]()
	coroutine.RegisterType[[15]uint64]()
	coroutine.RegisterType[[16384]byte]()
	coroutine.RegisterType[[16384]uint8]()
	coroutine.RegisterType[[16]byte]()
	coroutine.RegisterType[[16]int64]()
	coroutine.RegisterType[[16]uint64]()
	coroutine.RegisterType[[17]string]()
	coroutine.RegisterType[[1]byte]()
	coroutine.RegisterType[[1]uint64]()
	coroutine.RegisterType[[1]uint8]()
	coroutine.RegisterType[[1]uintptr]()
	coroutine.RegisterType[[20]byte]()
	coroutine.RegisterType[[20]uint64]()
	coroutine.RegisterType[[21]byte]()
	coroutine.RegisterType[[23]uint64]()
	coroutine.RegisterType[[249]uint8]()
	coroutine.RegisterType[[24]byte]()
	coroutine.RegisterType[[24]uint32]()
	coroutine.RegisterType[[252]uintptr]()
	coroutine.RegisterType[[253]uintptr]()
	coroutine.RegisterType[[256][]byte]()
	coroutine.RegisterType[[256]byte]()
	coroutine.RegisterType[[256]int]()
	coroutine.RegisterType[[256]int8]()
	coroutine.RegisterType[[256]uint64]()
	coroutine.RegisterType[[256]uint8]()
	coroutine.RegisterType[[2]byte]()
	coroutine.RegisterType[[2]int]()
	coroutine.RegisterType[[2]int32]()
	coroutine.RegisterType[[2]uint16]()
	coroutine.RegisterType[[2]uint64]()
	coroutine.RegisterType[[2]uintptr]()
	coroutine.RegisterType[[32]byte]()
	coroutine.RegisterType[[32]float64]()
	coroutine.RegisterType[[32]string]()
	coroutine.RegisterType[[32]uint8]()
	coroutine.RegisterType[[32]uintptr]()
	coroutine.RegisterType[[33]float64]()
	coroutine.RegisterType[[3]byte]()
	coroutine.RegisterType[[3]float64]()
	coroutine.RegisterType[[3]int]()
	coroutine.RegisterType[[3]int64]()
	coroutine.RegisterType[[3]uint16]()
	coroutine.RegisterType[[3]uint32]()
	coroutine.RegisterType[[3]uint64]()
	coroutine.RegisterType[[4096]byte]()
	coroutine.RegisterType[[40]byte]()
	coroutine.RegisterType[[44]byte]()
	coroutine.RegisterType[[4]byte]()
	coroutine.RegisterType[[4]float64]()
	coroutine.RegisterType[[4]int64]()
	coroutine.RegisterType[[4]string]()
	coroutine.RegisterType[[4]uint16]()
	coroutine.RegisterType[[4]uint32]()
	coroutine.RegisterType[[4]uint64]()
	coroutine.RegisterType[[4]uintptr]()
	coroutine.RegisterType[[50]uintptr]()
	coroutine.RegisterType[[512]byte]()
	coroutine.RegisterType[[512]uintptr]()
	coroutine.RegisterType[[5]byte]()
	coroutine.RegisterType[[5]float64]()
	coroutine.RegisterType[[5]uint]()
	coroutine.RegisterType[[5]uintptr]()
	coroutine.RegisterType[[61]struct {
		Size    uint32
		Mallocs uint64
		Frees   uint64
	}]()
	coroutine.RegisterType[[64488]byte]()
	coroutine.RegisterType[[64]byte]()
	coroutine.RegisterType[[64]uintptr]()
	coroutine.RegisterType[[65528]byte]()
	coroutine.RegisterType[[65]byte]()
	coroutine.RegisterType[[65]int8]()
	coroutine.RegisterType[[65]uint32]()
	coroutine.RegisterType[[65]uintptr]()
	coroutine.RegisterType[[68]byte]()
	coroutine.RegisterType[[68]struct {
		Size    uint32
		Mallocs uint64
		Frees   uint64
	}]()
	coroutine.RegisterType[[68]uint16]()
	coroutine.RegisterType[[68]uint32]()
	coroutine.RegisterType[[68]uint64]()
	coroutine.RegisterType[[68]uint8]()
	coroutine.RegisterType[[696][2]uint64]()
	coroutine.RegisterType[[6]byte]()
	coroutine.RegisterType[[6]float64]()
	coroutine.RegisterType[[6]int]()
	coroutine.RegisterType[[6]int8]()
	coroutine.RegisterType[[6]uintptr]()
	coroutine.RegisterType[[768]byte]()
	coroutine.RegisterType[[7]float64]()
	coroutine.RegisterType[[800]byte]()
	coroutine.RegisterType[[8192]byte]()
	coroutine.RegisterType[[8]byte]()
	coroutine.RegisterType[[8]float64]()
	coroutine.RegisterType[[8]string]()
	coroutine.RegisterType[[8]uint32]()
	coroutine.RegisterType[[8]uint64]()
	coroutine.RegisterType[[8]uint8]()
	coroutine.RegisterType[[96]byte]()
	coroutine.RegisterType[[96]int8]()
	coroutine.RegisterType[[9]string]()
	coroutine.RegisterType[[9]uintptr]()
	coroutine.RegisterType[[]*byte]()
	coroutine.RegisterType[[][2]uint16]()
	coroutine.RegisterType[[][]byte]()
	coroutine.RegisterType[[][]int32]()
	coroutine.RegisterType[[]byte]()
	coroutine.RegisterType[[]float32]()
	coroutine.RegisterType[[]float64]()
	coroutine.RegisterType[[]int]()
	coroutine.RegisterType[[]int16]()
	coroutine.RegisterType[[]int32]()
	coroutine.RegisterType[[]int64]()
	coroutine.RegisterType[[]int8]()
	coroutine.RegisterType[[]rune]()
	coroutine.RegisterType[[]string]()
	coroutine.RegisterType[[]uint16]()
	coroutine.RegisterType[[]uint32]()
	coroutine.RegisterType[[]uint64]()
	coroutine.RegisterType[[]uint8]()
	coroutine.RegisterType[[]uintptr]()
	coroutine.RegisterType[atomic.Bool]()
	coroutine.RegisterType[atomic.Int32]()
	coroutine.RegisterType[atomic.Int64]()
	coroutine.RegisterType[atomic.Uint32]()
	coroutine.RegisterType[atomic.Uint64]()
	coroutine.RegisterType[atomic.Uintptr]()
	coroutine.RegisterType[atomic.Value]()
	coroutine.RegisterType[base64.CorruptInputError]()
	coroutine.RegisterType[base64.Encoding]()
	coroutine.RegisterType[bool]()
	coroutine.RegisterType[byte]()
	coroutine.RegisterType[bytes.Buffer]()
	coroutine.RegisterType[bytes.Reader]()
	coroutine.RegisterType[complex128]()
	coroutine.RegisterType[complex64]()
	coroutine.RegisterType[float32]()
	coroutine.RegisterType[float64]()
	coroutine.RegisterType[fs.FileMode]()
	coroutine.RegisterType[fs.PathError]()
	coroutine.RegisterType[int]()
	coroutine.RegisterType[int16]()
	coroutine.RegisterType[int32]()
	coroutine.RegisterType[int64]()
	coroutine.RegisterType[int8]()
	coroutine.RegisterType[io.LimitedReader]()
	coroutine.RegisterType[io.OffsetWriter]()
	coroutine.RegisterType[io.PipeReader]()
	coroutine.RegisterType[io.PipeWriter]()
	coroutine.RegisterType[io.SectionReader]()
	coroutine.RegisterType[json.Decoder]()
	coroutine.RegisterType[json.Delim]()
	coroutine.RegisterType[json.Encoder]()
	coroutine.RegisterType[json.InvalidUTF8Error]()
	coroutine.RegisterType[json.InvalidUnmarshalError]()
	coroutine.RegisterType[json.MarshalerError]()
	coroutine.RegisterType[json.Number]()
	coroutine.RegisterType[json.RawMessage]()
	coroutine.RegisterType[json.SyntaxError]()
	coroutine.RegisterType[json.UnmarshalFieldError]()
	coroutine.RegisterType[json.UnmarshalTypeError]()
	coroutine.RegisterType[json.UnsupportedTypeError]()
	coroutine.RegisterType[json.UnsupportedValueError]()
	coroutine.RegisterType[log.Logger]()
	coroutine.RegisterType[map[*byte][]byte]()
	coroutine.RegisterType[map[int]int]()
	coroutine.RegisterType[map[string]bool]()
	coroutine.RegisterType[map[string]int]()
	coroutine.RegisterType[map[string]struct{}]()
	coroutine.RegisterType[map[string]uint64]()
	coroutine.RegisterType[os.File]()
	coroutine.RegisterType[os.LinkError]()
	coroutine.RegisterType[os.ProcAttr]()
	coroutine.RegisterType[os.Process]()
	coroutine.RegisterType[os.ProcessState]()
	coroutine.RegisterType[os.SyscallError]()
	coroutine.RegisterType[reflect.ChanDir]()
	coroutine.RegisterType[reflect.Kind]()
	coroutine.RegisterType[reflect.MapIter]()
	coroutine.RegisterType[reflect.Method]()
	coroutine.RegisterType[reflect.SelectCase]()
	coroutine.RegisterType[reflect.SelectDir]()
	coroutine.RegisterType[reflect.SliceHeader]()
	coroutine.RegisterType[reflect.StringHeader]()
	coroutine.RegisterType[reflect.StructField]()
	coroutine.RegisterType[reflect.StructTag]()
	coroutine.RegisterType[reflect.Value]()
	coroutine.RegisterType[reflect.ValueError]()
	coroutine.RegisterType[rune]()
	coroutine.RegisterType[runtime.BlockProfileRecord]()
	coroutine.RegisterType[runtime.Frame]()
	coroutine.RegisterType[runtime.Frames]()
	coroutine.RegisterType[runtime.Func]()
	coroutine.RegisterType[runtime.MemProfileRecord]()
	coroutine.RegisterType[runtime.MemStats]()
	coroutine.RegisterType[runtime.PanicNilError]()
	coroutine.RegisterType[runtime.Pinner]()
	coroutine.RegisterType[runtime.StackRecord]()
	coroutine.RegisterType[runtime.TypeAssertionError]()
	coroutine.RegisterType[slog.Attr]()
	coroutine.RegisterType[slog.HandlerOptions]()
	coroutine.RegisterType[slog.JSONHandler]()
	coroutine.RegisterType[slog.Kind]()
	coroutine.RegisterType[slog.Level]()
	coroutine.RegisterType[slog.LevelVar]()
	coroutine.RegisterType[slog.Logger]()
	coroutine.RegisterType[slog.Record]()
	coroutine.RegisterType[slog.Source]()
	coroutine.RegisterType[slog.TextHandler]()
	coroutine.RegisterType[slog.Value]()
	coroutine.RegisterType[sort.Float64Slice]()
	coroutine.RegisterType[sort.IntSlice]()
	coroutine.RegisterType[sort.StringSlice]()
	coroutine.RegisterType[strconv.NumError]()
	coroutine.RegisterType[string]()
	coroutine.RegisterType[strings.Builder]()
	coroutine.RegisterType[strings.Reader]()
	coroutine.RegisterType[strings.Replacer]()
	coroutine.RegisterType[struct {
		b bool
		x any
	}]()
	coroutine.RegisterType[struct {
		base uintptr
		end  uintptr
	}]()
	coroutine.RegisterType[struct {
		enabled bool
		pad     [3]byte
		needed  bool
		alignme uint64
	}]()
	coroutine.RegisterType[struct {
		fill     uint64
		capacity uint64
	}]()
	coroutine.RegisterType[struct {
		ptr interface{}
		len int
	}]()
	coroutine.RegisterType[struct {
		tick uint64
		i    int
	}]()
	coroutine.RegisterType[struct{}]()
	coroutine.RegisterType[sync.Cond]()
	coroutine.RegisterType[sync.Map]()
	coroutine.RegisterType[sync.Mutex]()
	coroutine.RegisterType[sync.Once]()
	coroutine.RegisterType[sync.Pool]()
	coroutine.RegisterType[sync.RWMutex]()
	coroutine.RegisterType[sync.WaitGroup]()
	coroutine.RegisterType[syscall.Cmsghdr]()
	coroutine.RegisterType[syscall.Credential]()
	coroutine.RegisterType[syscall.Dirent]()
	coroutine.RegisterType[syscall.EpollEvent]()
	coroutine.RegisterType[syscall.Errno]()
	coroutine.RegisterType[syscall.FdSet]()
	coroutine.RegisterType[syscall.Flock_t]()
	coroutine.RegisterType[syscall.Fsid]()
	coroutine.RegisterType[syscall.ICMPv6Filter]()
	coroutine.RegisterType[syscall.IPMreq]()
	coroutine.RegisterType[syscall.IPMreqn]()
	coroutine.RegisterType[syscall.IPv6MTUInfo]()
	coroutine.RegisterType[syscall.IPv6Mreq]()
	coroutine.RegisterType[syscall.IfAddrmsg]()
	coroutine.RegisterType[syscall.IfInfomsg]()
	coroutine.RegisterType[syscall.Inet4Pktinfo]()
	coroutine.RegisterType[syscall.Inet6Pktinfo]()
	coroutine.RegisterType[syscall.InotifyEvent]()
	coroutine.RegisterType[syscall.Iovec]()
	coroutine.RegisterType[syscall.Linger]()
	coroutine.RegisterType[syscall.Msghdr]()
	coroutine.RegisterType[syscall.NetlinkMessage]()
	coroutine.RegisterType[syscall.NetlinkRouteAttr]()
	coroutine.RegisterType[syscall.NetlinkRouteRequest]()
	coroutine.RegisterType[syscall.NlAttr]()
	coroutine.RegisterType[syscall.NlMsgerr]()
	coroutine.RegisterType[syscall.NlMsghdr]()
	coroutine.RegisterType[syscall.ProcAttr]()
	coroutine.RegisterType[syscall.PtraceRegs]()
	coroutine.RegisterType[syscall.RawSockaddr]()
	coroutine.RegisterType[syscall.RawSockaddrAny]()
	coroutine.RegisterType[syscall.RawSockaddrInet4]()
	coroutine.RegisterType[syscall.RawSockaddrInet6]()
	coroutine.RegisterType[syscall.RawSockaddrLinklayer]()
	coroutine.RegisterType[syscall.RawSockaddrNetlink]()
	coroutine.RegisterType[syscall.RawSockaddrUnix]()
	coroutine.RegisterType[syscall.Rlimit]()
	coroutine.RegisterType[syscall.RtAttr]()
	coroutine.RegisterType[syscall.RtGenmsg]()
	coroutine.RegisterType[syscall.RtMsg]()
	coroutine.RegisterType[syscall.RtNexthop]()
	coroutine.RegisterType[syscall.Rusage]()
	coroutine.RegisterType[syscall.Signal]()
	coroutine.RegisterType[syscall.SockFilter]()
	coroutine.RegisterType[syscall.SockFprog]()
	coroutine.RegisterType[syscall.SockaddrInet4]()
	coroutine.RegisterType[syscall.SockaddrInet6]()
	coroutine.RegisterType[syscall.SockaddrLinklayer]()
	coroutine.RegisterType[syscall.SockaddrNetlink]()
	coroutine.RegisterType[syscall.SockaddrUnix]()
	coroutine.RegisterType[syscall.SocketControlMessage]()
	coroutine.RegisterType[syscall.Stat_t]()
	coroutine.RegisterType[syscall.Statfs_t]()
	coroutine.RegisterType[syscall.SysProcAttr]()
	coroutine.RegisterType[syscall.SysProcIDMap]()
	coroutine.RegisterType[syscall.Sysinfo_t]()
	coroutine.RegisterType[syscall.TCPInfo]()
	coroutine.RegisterType[syscall.Termios]()
	coroutine.RegisterType[syscall.Time_t]()
	coroutine.RegisterType[syscall.Timespec]()
	coroutine.RegisterType[syscall.Timeval]()
	coroutine.RegisterType[syscall.Timex]()
	coroutine.RegisterType[syscall.Tms]()
	coroutine.RegisterType[syscall.Ucred]()
	coroutine.RegisterType[syscall.Ustat_t]()
	coroutine.RegisterType[syscall.Utimbuf]()
	coroutine.RegisterType[syscall.Utsname]()
	coroutine.RegisterType[syscall.WaitStatus]()
	coroutine.RegisterType[time.Duration]()
	coroutine.RegisterType[time.Location]()
	coroutine.RegisterType[time.Month]()
	coroutine.RegisterType[time.ParseError]()
	coroutine.RegisterType[time.Ticker]()
	coroutine.RegisterType[time.Time]()
	coroutine.RegisterType[time.Timer]()
	coroutine.RegisterType[time.Weekday]()
	coroutine.RegisterType[uint]()
	coroutine.RegisterType[uint16]()
	coroutine.RegisterType[uint32]()
	coroutine.RegisterType[uint64]()
	coroutine.RegisterType[uint8]()
	coroutine.RegisterType[uintptr]()
	coroutine.RegisterType[unicode.CaseRange]()
	coroutine.RegisterType[unicode.Range16]()
	coroutine.RegisterType[unicode.Range32]()
	coroutine.RegisterType[unicode.RangeTable]()
	coroutine.RegisterType[unicode.SpecialCase]()
	coroutine.RegisterType[unsafe.Pointer]()
}
