// Code generated by coroc. DO NOT EDIT

//go:build durable

package testdata

import (
	"github.com/stealthrocket/coroutine"
	serde "github.com/stealthrocket/coroutine/serde"
	runtime "runtime"
	sync "sync"
	atomic "sync/atomic"
	unsafe "unsafe"
)

func Identity(n int) {
	_c := coroutine.LoadContext[int, any]()
	_f := _c.Push()
	if _f.IP > 0 {
		n = _f.Get(0).(int)
	}
	defer func() {
		if _c.Unwinding() {
			_f.Set(0, n)
		} else {
			_c.Pop()
		}
	}()
	coroutine.Yield[int, any](n)
}

func SquareGenerator(n int) {
	_c := coroutine.LoadContext[int, any]()
	_f := _c.Push()
	var _v0 int
	if _f.IP > 0 {
		n = _f.Get(0).(int)
		_v0 = _f.Get(1).(int)
	}
	defer func() {
		if _c.Unwinding() {
			_f.Set(0, n)
			_f.Set(1, _v0)
		} else {
			_c.Pop()
		}
	}()
	switch {
	case _f.IP < 2:
		_v0 = 1
		_f.IP = 2
		fallthrough
	case _f.IP < 3:
		for ; _v0 <= n; _v0++ {
			coroutine.Yield[int, any](_v0 * _v0)
			_f.IP = 2
		}
	}
}

func SquareGeneratorTwice(n int) {
	_c := coroutine.LoadContext[int, any]()
	_f := _c.Push()
	if _f.IP > 0 {
		n = _f.Get(0).(int)
	}
	defer func() {
		if _c.Unwinding() {
			_f.Set(0, n)
		} else {
			_c.Pop()
		}
	}()
	switch {
	case _f.IP < 2:
		SquareGenerator(n)
		_f.IP = 2
		fallthrough
	case _f.IP < 3:
		SquareGenerator(n)
	}
}

func EvenSquareGenerator(n int) {
	_c := coroutine.LoadContext[int, any]()
	_f := _c.Push()
	var (
		_v0 int
		_v1 int
	)
	if _f.IP > 0 {
		n = _f.Get(0).(int)
		_v0 = _f.Get(1).(int)
		_v1 = _f.Get(2).(int)
	}
	defer func() {
		if _c.Unwinding() {
			_f.Set(0, n)
			_f.Set(1, _v0)
			_f.Set(2, _v1)
		} else {
			_c.Pop()
		}
	}()
	switch {
	case _f.IP < 2:
		_v0 = 1
		_f.IP = 2
		fallthrough
	case _f.IP < 4:
		for ; _v0 <= n; _v0++ {
			switch {
			case _f.IP < 3:
				_v1 = _v0 % 2
				_f.IP = 3
				fallthrough
			case _f.IP < 4:
				if _v1 == 0 {
					coroutine.Yield[int, any](_v0 * _v0)
				}
			}
			_f.IP = 2
		}
	}
}

func NestedLoops(n int) {
	_c := coroutine.LoadContext[int, any]()
	_f := _c.Push()
	var (
		_v0 int
		_v1 int
		_v2 int
	)
	if _f.IP > 0 {
		n = _f.Get(0).(int)
		_v0 = _f.Get(1).(int)
		_v1 = _f.Get(2).(int)
		_v2 = _f.Get(3).(int)
	}
	defer func() {
		if _c.Unwinding() {
			_f.Set(0, n)
			_f.Set(1, _v0)
			_f.Set(2, _v1)
			_f.Set(3, _v2)
		} else {
			_c.Pop()
		}
	}()
	switch {
	case _f.IP < 2:
		_v0 = 1
		_f.IP = 2
		fallthrough
	case _f.IP < 5:
		for ; _v0 <= n; _v0++ {
			switch {
			case _f.IP < 3:
				_v1 = 1
				_f.IP = 3
				fallthrough
			case _f.IP < 5:
				for ; _v1 <= n; _v1++ {
					switch {
					case _f.IP < 4:
						_v2 = 1
						_f.IP = 4
						fallthrough
					case _f.IP < 5:
						for ; _v2 <= n; _v2++ {
							coroutine.Yield[int, any](_v0 * _v1 * _v2)
							_f.IP = 4
						}
					}
					_f.IP = 3
				}
			}
			_f.IP = 2
		}
	}
}

func FizzBuzzIfGenerator(n int) {
	_c := coroutine.LoadContext[int, any]()
	_f := _c.Push()
	var (
		_v0 int
		_v1 int
	)
	if _f.IP > 0 {
		n = _f.Get(0).(int)
		_v0 = _f.Get(1).(int)
		_v1 = _f.Get(2).(int)
	}
	defer func() {
		if _c.Unwinding() {
			_f.Set(0, n)
			_f.Set(1, _v0)
			_f.Set(2, _v1)
		} else {
			_c.Pop()
		}
	}()
	switch {
	case _f.IP < 2:
		_v0 = 1
		_f.IP = 2
		fallthrough
	case _f.IP < 7:
		for ; _v0 <= n; _v0++ {
			if _v0%3 == 0 && _v0%5 == 0 {
				coroutine.Yield[int, any](FizzBuzz)
			} else if _v0%3 == 0 {
				coroutine.Yield[int, any](Fizz)
			} else {
				_v1 = _v0 % 5
				if _v1 == 0 {
					coroutine.Yield[int, any](Buzz)
				} else {
					coroutine.Yield[int, any](_v0)
				}
			}
			_f.IP = 2
		}
	}
}

func FizzBuzzSwitchGenerator(n int) {
	_c := coroutine.LoadContext[int, any]()
	_f := _c.Push()
	var _v0 int
	if _f.IP > 0 {
		n = _f.Get(0).(int)
		_v0 = _f.Get(1).(int)
	}
	defer func() {
		if _c.Unwinding() {
			_f.Set(0, n)
			_f.Set(1, _v0)
		} else {
			_c.Pop()
		}
	}()
	switch {
	case _f.IP < 2:
		_v0 = 1
		_f.IP = 2
		fallthrough
	case _f.IP < 6:
		for ; _v0 <= n; _v0++ {
			switch {
			case _v0%3 == 0 && _v0%5 == 0:
				coroutine.Yield[int, any](FizzBuzz)
			case _v0%3 == 0:
				coroutine.Yield[int, any](Fizz)
			case _v0%5 == 0:
				coroutine.Yield[int, any](Buzz)
			default:
				coroutine.Yield[int, any](_v0)
			}
			_f.IP = 2
		}
	}
}

func Shadowing(_ int) {
	_c := coroutine.LoadContext[int, any]()
	_f := _c.Push()
	var (
		_v0 int
		_v1 int
		_v2 int
		_v3 int
	)
	if _f.IP > 0 {
		_v0 = _f.Get(0).(int)
		_v1 = _f.Get(1).(int)
		_v2 = _f.Get(2).(int)
		_v3 = _f.Get(3).(int)
	}
	defer func() {
		if _c.Unwinding() {
			_f.Set(0, _v0)
			_f.Set(1, _v1)
			_f.Set(2, _v2)
			_f.Set(3, _v3)
		} else {
			_c.Pop()
		}
	}()
	switch {
	case _f.IP < 2:
		_v0 = 0
		_f.IP = 2
		fallthrough
	case _f.IP < 3:
		coroutine.Yield[int, any](_v0)
		_f.IP = 3
		fallthrough
	case _f.IP < 5:
		switch {
		case _f.IP < 4:
			_v1 = 1
			_f.IP = 4
			fallthrough
		case _f.IP < 5:
			if true {
				coroutine.Yield[int, any](_v1)
			}
		}
		_f.IP = 5
		fallthrough
	case _f.IP < 6:
		coroutine.Yield[int, any](_v0)
		_f.IP = 6
		fallthrough
	case _f.IP < 8:
		switch {
		case _f.IP < 7:
			_v2 = 1
			_f.IP = 7
			fallthrough
		case _f.IP < 8:
			for ; _v2 < 3; _v2++ {
				coroutine.Yield[int, any](_v2)
				_f.IP = 7
			}
		}
		_f.IP = 8
		fallthrough
	case _f.IP < 9:
		coroutine.Yield[int, any](_v0)
		_f.IP = 9
		fallthrough
	case _f.IP < 11:
		switch {
		case _f.IP < 10:
			_v3 = 1
			_f.IP = 10
			fallthrough
		case _f.IP < 11:
			switch _v3 {
			case 1:
				coroutine.Yield[int, any](_v3)
			}
		}
		_f.IP = 11
		fallthrough
	case _f.IP < 12:
		coroutine.Yield[int, any](_v0)
	}
}

func RangeSliceIndexGenerator(_ int) {
	_c := coroutine.LoadContext[int, any]()
	_f := _c.Push()
	var (
		_v0 []int
		_v1 int
	)
	if _f.IP > 0 {
		_v0 = _f.Get(0).([]int)
		_v1 = _f.Get(1).(int)
	}
	defer func() {
		if _c.Unwinding() {
			_f.Set(0, _v0)
			_f.Set(1, _v1)
		} else {
			_c.Pop()
		}
	}()
	switch {
	case _f.IP < 2:
		_v0 = []int{10, 20, 30}
		_f.IP = 2
		fallthrough
	case _f.IP < 4:
		switch {
		case _f.IP < 3:
			_v1 = 0
			_f.IP = 3
			fallthrough
		case _f.IP < 4:
			for ; _v1 < len(_v0); _v1++ {
				coroutine.Yield[int, any](_v1)
				_f.IP = 3
			}
		}
	}
}

func RangeArrayIndexValueGenerator(_ int) {
	_c := coroutine.LoadContext[int, any]()
	_f := _c.Push()
	var (
		_v0 [3]int
		_v1 int
		_v2 int
	)
	if _f.IP > 0 {
		_v0 = _f.Get(0).([3]int)
		_v1 = _f.Get(1).(int)
		_v2 = _f.Get(2).(int)
	}
	defer func() {
		if _c.Unwinding() {
			_f.Set(0, _v0)
			_f.Set(1, _v1)
			_f.Set(2, _v2)
		} else {
			_c.Pop()
		}
	}()
	switch {
	case _f.IP < 2:
		_v0 = [...]int{10, 20, 30}
		_f.IP = 2
		fallthrough
	case _f.IP < 6:
		switch {
		case _f.IP < 3:
			_v1 = 0
			_f.IP = 3
			fallthrough
		case _f.IP < 6:
			for ; _v1 < len(_v0); _v1++ {
				switch {
				case _f.IP < 4:
					_v2 = _v0[_v1]
					_f.IP = 4
					fallthrough
				case _f.IP < 5:
					coroutine.Yield[int, any](_v1)
					_f.IP = 5
					fallthrough
				case _f.IP < 6:
					coroutine.Yield[int, any](_v2)
				}
				_f.IP = 3
			}
		}
	}
}
func init() {
	serde.RegisterType[**byte]()
	serde.RegisterType[*[100000]uintptr]()
	serde.RegisterType[*[1125899906842623]byte]()
	serde.RegisterType[*[131072]uint16]()
	serde.RegisterType[*[140737488355327]byte]()
	serde.RegisterType[*[16]byte]()
	serde.RegisterType[*[171]uint8]()
	serde.RegisterType[*[1]uintptr]()
	serde.RegisterType[*[268435456]uintptr]()
	serde.RegisterType[*[281474976710655]uint32]()
	serde.RegisterType[*[2]float32]()
	serde.RegisterType[*[2]float64]()
	serde.RegisterType[*[2]uint32]()
	serde.RegisterType[*[2]uintptr]()
	serde.RegisterType[*[32]rune]()
	serde.RegisterType[*[32]uintptr]()
	serde.RegisterType[*[4]byte]()
	serde.RegisterType[*[562949953421311]uint16]()
	serde.RegisterType[*[65536]uintptr]()
	serde.RegisterType[*[70368744177663]uint16]()
	serde.RegisterType[*[8]byte]()
	serde.RegisterType[*[8]uint8]()
	serde.RegisterType[*[]uint64]()
	serde.RegisterType[*bool]()
	serde.RegisterType[*byte]()
	serde.RegisterType[*int32]()
	serde.RegisterType[*int64]()
	serde.RegisterType[*string]()
	serde.RegisterType[*uint]()
	serde.RegisterType[*uint16]()
	serde.RegisterType[*uint32]()
	serde.RegisterType[*uint64]()
	serde.RegisterType[*uint8]()
	serde.RegisterType[*uintptr]()
	serde.RegisterType[[0]uintptr]()
	serde.RegisterType[[1000]uintptr]()
	serde.RegisterType[[100]byte]()
	serde.RegisterType[[1024]bool]()
	serde.RegisterType[[1024]byte]()
	serde.RegisterType[[1024]uint8]()
	serde.RegisterType[[1048576]uint8]()
	serde.RegisterType[[104]byte]()
	serde.RegisterType[[108]byte]()
	serde.RegisterType[[10]byte]()
	serde.RegisterType[[10]string]()
	serde.RegisterType[[128]byte]()
	serde.RegisterType[[128]uint64]()
	serde.RegisterType[[128]uintptr]()
	serde.RegisterType[[129]uint8]()
	serde.RegisterType[[131072]uintptr]()
	serde.RegisterType[[14]byte]()
	serde.RegisterType[[15]uint64]()
	serde.RegisterType[[16384]byte]()
	serde.RegisterType[[16384]uint8]()
	serde.RegisterType[[16]byte]()
	serde.RegisterType[[16]uint64]()
	serde.RegisterType[[17]string]()
	serde.RegisterType[[1]byte]()
	serde.RegisterType[[1]uint64]()
	serde.RegisterType[[1]uint8]()
	serde.RegisterType[[1]uintptr]()
	serde.RegisterType[[20]byte]()
	serde.RegisterType[[21]byte]()
	serde.RegisterType[[23]uint64]()
	serde.RegisterType[[249]uint8]()
	serde.RegisterType[[24]byte]()
	serde.RegisterType[[24]uint32]()
	serde.RegisterType[[252]uintptr]()
	serde.RegisterType[[253]uintptr]()
	serde.RegisterType[[256]uint64]()
	serde.RegisterType[[2]uint64]()
	serde.RegisterType[[2]uintptr]()
	serde.RegisterType[[32]byte]()
	serde.RegisterType[[32]string]()
	serde.RegisterType[[32]uintptr]()
	serde.RegisterType[[33]float64]()
	serde.RegisterType[[3]byte]()
	serde.RegisterType[[3]int]()
	serde.RegisterType[[3]uint16]()
	serde.RegisterType[[3]uint32]()
	serde.RegisterType[[4096]byte]()
	serde.RegisterType[[40]byte]()
	serde.RegisterType[[44]byte]()
	serde.RegisterType[[4]byte]()
	serde.RegisterType[[4]float64]()
	serde.RegisterType[[4]string]()
	serde.RegisterType[[4]uint16]()
	serde.RegisterType[[4]uint32]()
	serde.RegisterType[[4]uint64]()
	serde.RegisterType[[4]uintptr]()
	serde.RegisterType[[50]uintptr]()
	serde.RegisterType[[512]byte]()
	serde.RegisterType[[512]uintptr]()
	serde.RegisterType[[5]byte]()
	serde.RegisterType[[5]uint]()
	serde.RegisterType[[61]struct {
		Size    uint32
		Mallocs uint64
		Frees   uint64
	}]()
	serde.RegisterType[[64488]byte]()
	serde.RegisterType[[64]byte]()
	serde.RegisterType[[64]uintptr]()
	serde.RegisterType[[65528]byte]()
	serde.RegisterType[[65]uint32]()
	serde.RegisterType[[65]uintptr]()
	serde.RegisterType[[68]struct {
		Size    uint32
		Mallocs uint64
		Frees   uint64
	}]()
	serde.RegisterType[[68]uint16]()
	serde.RegisterType[[68]uint32]()
	serde.RegisterType[[68]uint64]()
	serde.RegisterType[[68]uint8]()
	serde.RegisterType[[6]uintptr]()
	serde.RegisterType[[8192]byte]()
	serde.RegisterType[[8]byte]()
	serde.RegisterType[[8]string]()
	serde.RegisterType[[8]uint64]()
	serde.RegisterType[[8]uint8]()
	serde.RegisterType[[96]byte]()
	serde.RegisterType[[9]string]()
	serde.RegisterType[[9]uintptr]()
	serde.RegisterType[[][]int32]()
	serde.RegisterType[[]byte]()
	serde.RegisterType[[]float64]()
	serde.RegisterType[[]int]()
	serde.RegisterType[[]int32]()
	serde.RegisterType[[]rune]()
	serde.RegisterType[[]string]()
	serde.RegisterType[[]uint16]()
	serde.RegisterType[[]uint32]()
	serde.RegisterType[[]uint64]()
	serde.RegisterType[[]uint8]()
	serde.RegisterType[[]uintptr]()
	serde.RegisterType[atomic.Bool]()
	serde.RegisterType[atomic.Int32]()
	serde.RegisterType[atomic.Int64]()
	serde.RegisterType[atomic.Uint32]()
	serde.RegisterType[atomic.Uint64]()
	serde.RegisterType[atomic.Uintptr]()
	serde.RegisterType[atomic.Value]()
	serde.RegisterType[bool]()
	serde.RegisterType[byte]()
	serde.RegisterType[complex128]()
	serde.RegisterType[float32]()
	serde.RegisterType[float64]()
	serde.RegisterType[int]()
	serde.RegisterType[int16]()
	serde.RegisterType[int32]()
	serde.RegisterType[int64]()
	serde.RegisterType[int8]()
	serde.RegisterType[map[int]int]()
	serde.RegisterType[map[string]bool]()
	serde.RegisterType[map[string]uint64]()
	serde.RegisterType[rune]()
	serde.RegisterType[runtime.BlockProfileRecord]()
	serde.RegisterType[runtime.Frame]()
	serde.RegisterType[runtime.Frames]()
	serde.RegisterType[runtime.Func]()
	serde.RegisterType[runtime.MemProfileRecord]()
	serde.RegisterType[runtime.MemStats]()
	serde.RegisterType[runtime.PanicNilError]()
	serde.RegisterType[runtime.Pinner]()
	serde.RegisterType[runtime.StackRecord]()
	serde.RegisterType[runtime.TypeAssertionError]()
	serde.RegisterType[string]()
	serde.RegisterType[struct {
		base uintptr
		end  uintptr
	}]()
	serde.RegisterType[struct {
		enabled bool
		pad     [3]byte
		needed  bool
		alignme uint64
	}]()
	serde.RegisterType[struct {
		fill     uint64
		capacity uint64
	}]()
	serde.RegisterType[struct {
		tick uint64
		i    int
	}]()
	serde.RegisterType[struct{}]()
	serde.RegisterType[sync.Cond]()
	serde.RegisterType[sync.Map]()
	serde.RegisterType[sync.Mutex]()
	serde.RegisterType[sync.Once]()
	serde.RegisterType[sync.Pool]()
	serde.RegisterType[sync.RWMutex]()
	serde.RegisterType[sync.WaitGroup]()
	serde.RegisterType[uint]()
	serde.RegisterType[uint16]()
	serde.RegisterType[uint32]()
	serde.RegisterType[uint64]()
	serde.RegisterType[uint8]()
	serde.RegisterType[uintptr]()
	serde.RegisterType[unsafe.Pointer]()
}
