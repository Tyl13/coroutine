package main

import (
	"flag"
	"fmt"
	"go/ast"
	"go/format"
	"go/token"
	"os"
	"path/filepath"
	"strconv"
	"strings"

	"github.com/stealthrocket/coroutine/serde"
	"golang.org/x/tools/go/packages"
)

func usage() {
	fmt.Fprintf(os.Stderr, `
serde types register geneator.

USAGE:
  serde [OPTIONS] [PATH]

OPTIONS:
`)
	flag.PrintDefaults()
}

func main() {
	buildTags := ""
	flag.StringVar(&buildTags, "tags", "", "comma-separated list of build tags to apply")
	flag.Usage = usage
	flag.Parse()

	path := flag.Arg(0)
	if path == "" {
		// If the compiler was invoked via go generate, the GOFILE
		// environment variable will be set with the name of the file
		// that contained the go:generate directive, and the current
		// working directory will be set to the directory that
		// contained the file.
		if gofile := os.Getenv("GOFILE"); gofile != "" {
			path = gofile
		} else {
			path = "."
		}
	}

	err := generate(path, strings.Split(buildTags, ","))
	if err != nil {
		fmt.Fprintf(os.Stderr, "error: %s\n", err)
		os.Exit(1)
	}
}

func generate(path string, tags []string) error {
	cfg := &packages.Config{
		Mode:       packages.NeedName | packages.NeedTypes | packages.NeedTypesInfo | packages.NeedSyntax | packages.NeedDeps | packages.NeedImports | packages.NeedFiles,
		BuildFlags: []string{fmt.Sprintf("-tags=%s", strings.Join(tags, " "))},
		Fset:       new(token.FileSet),
	}
	pkgs, err := packages.Load(cfg, path)
	if err != nil {
		return fmt.Errorf("could not parse source: %w", err)
	}

	for _, p := range pkgs {
		if err := genpkg(cfg.Fset, tags, p); err != nil {
			return fmt.Errorf("could not generate serde: %w", err)
		}
	}
	return nil
}

const (
	serdePackage = "github.com/stealthrocket/coroutine/serde"
)

func genpkg(fset *token.FileSet, tags []string, p *packages.Package) error {
	gen := &ast.File{
		Name: ast.NewIdent(p.Name),
	}
	gen.Decls = append(gen.Decls, &ast.GenDecl{
		Tok: token.IMPORT,
		Specs: []ast.Spec{
			&ast.ImportSpec{
				Name: ast.NewIdent("serde"),
				Path: &ast.BasicLit{Kind: token.STRING, Value: strconv.Quote(serdePackage)},
			},
		},
	})

	if err := serde.GenerateTypesInit(fset, gen, p); err != nil {
		return err
	}

	var b strings.Builder
	b.WriteString(`// Code generated by serde. DO NOT EDIT`)
	b.WriteString("\n\n")
	if len(tags) > 0 {
		b.WriteString(`//go:build `)
		b.WriteString(strings.Join(tags, " "))
		b.WriteString("\n\n")
	}

	samplefile := p.GoFiles[0]
	outputPath := outputFile(samplefile)
	outputFile, err := os.Create(outputPath)
	if err != nil {
		return fmt.Errorf("os.Create %q: %w", outputPath, err)
	}
	defer outputFile.Close()

	if _, err := outputFile.WriteString(b.String()); err != nil {
		return err
	}

	if err := format.Node(outputFile, fset, gen); err != nil {
		return err
	}

	return outputFile.Close()
}

func outputFile(gofile string) string {
	dir, file := filepath.Split(gofile)

	// Try to preserve build tags in the file name.
	i := strings.LastIndexByte(file, '.')
	if i == -1 {
		panic(fmt.Errorf("files does not end in .go: %s", file))
	}
	noext := file[:i]
	parts := strings.Split(noext, "_")
	parts[0] = "serde_generated"

	outFile := strings.Join(parts, "_") + ".go"
	return filepath.Join(dir, outFile)
}
